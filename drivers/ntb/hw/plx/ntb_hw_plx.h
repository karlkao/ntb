/*
 * This file is provided under a GPLv2 license. When using or redistributing
 *   this file, you may do so under that license.
 *
 *   GPL LICENSE SUMMARY
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of version 2 of the GNU General Public License as
 *   published by the Free Software Foundataion.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Contact Information:
 * Karl Kao <karl.kao@gmail.com>
 */

#ifndef NTB_HW_PLX_H
#define NTB_HW_PLX_H

#include <linux/ntb.h>
#include <linux/pci.h>

/* NTB config */
#define PLXNTB_MW_COUNT					2
#define PLXNTB_DB_COUNT					16
#define PLXNTB_DB_SHIFT					(PLXNTB_DB_COUNT + 1)
#define PLXNTB_SPAD_COUNT				8
#define PLXNTB_SPAD_SHIFT				2

/* flags to indicate unsafe api */
#define NTB_UNSAFE_DB					BIT_ULL(0)
#define NTB_UNSAFE_SPAD					BIT_ULL(1)

/* PCI */
#define PCI_DEVICE_ID_PLX_NTB_NT0			0x87B0

/* hardcoded BAR addresses for Link side */
#define PLXNTB_NTB0_LINK_BAR0				0x80000000
#define PLXNTB_NTB0_LINK_BAR2				0x40000000
#define PLXNTB_NTB0_LINK_BAR4				0x00000000
#define PLXNTB_NTB0_LINK_BAR5				0x00000100

/* PCI effective address, double-word (32-bit) base */
#define PCIEA(offset)					(offset / sizeof(u32))

/* PCI register entry - standard access */
#define PLXNTB_COMMAND_REG				PCIEA(0x04)
#define PLXNTB_COMMAND_MEMORY_ACCESS_ENABLE		BIT(1)
#define PLXNTB_COMMAND_BUS_MASTER_ENABLE		BIT(2)
#define PLXNTB_COMMAND_SERR_ENABLE			BIT(8)
#define PLXNTB_COMMAND_INTERRUPT_DISABLE		BIT(10)

#define PLXNTB_BAR_64_BIT				BIT(2)
#define PLXNTB_BAR_PREFETCHABLE				BIT(3)
#define PLXNTB_BAR_MASK					0xFFFFFFFF

#define PLXNTB_BAR0_REG					PCIEA(0x10)
#define PLXNTB_BAR1_REG					PCIEA(0x14)
#define PLXNTB_BAR2_REG					PCIEA(0x18)
#define PLXNTB_BAR3_REG					PCIEA(0x1C)
#define PLXNTB_BAR4_REG					PCIEA(0x20)
#define PLXNTB_BAR5_REG					PCIEA(0x24)

#define PLXNTB_MSI_CONTROL_REG				PCIEA(0x48)
#define PLXNTB_MSI_MASK_REG				PCIEA(0x58)
#define PLXNTB_MSI_MULTIPLE_MESSAGE_ENABLE_BIT		20

#define PLXNTB_DEVSTS_AND_CONTROL_REG			PCIEA(0x70)
#define PLXNTB_DEVSTS_AND_CONTROL_MAX_PAYLOAD_256	(0x01 << 5)
#define PLXNTB_DEVSTS_AND_CONTROL_NO_SNOOP_ENABLE	BIT(11)

#define PLXNTB_LINK_STATUS_AND_CONTROL_REG		PCIEA(0x78)
#define PLXNTB_LINK_STATUS_AND_CONTROL_2_REG		PCIEA(0x98)
#define PLXNTB_LINK_STATUS_SPEED_WIDTH_MASK		GENMASK(25, 16)
#define PLXNTB_LINK_STATUS_SHIFT			16
#define PLXNTB_LINK_SPEED_SHIFT				4
#define PLXNTB_LINK_WIDTH_MASK				0x03F0
#define PLXNTB_LINK_SPEED(x)				((x) & 0x000F)
#define PLXNTB_LINK_WIDTH(x)				(((x) & 0x03F0) >> 4)

#define PLXNTB_LINK_BAR2_SETUP_REG			PCIEA(0xE8)
#define PLXNTB_LINK_BAR3_SETUP_REG			PCIEA(0xEC)
#define PLXNTB_LINK_BAR4_SETUP_REG			PCIEA(0xF0)
#define PLXNTB_LINK_BAR5_SETUP_REG			PCIEA(0xF4)

/* PCI register entry - extended access */
#define PLXNTB_PORT_DISABLE_BIT				BIT(0)
#define PLXNTB_PORT_CONTROL				PCIEA(0x208)

/* registers of VS0 Upstream */
#define PLXNTB_VS0_UPSTREAM_PORT_MASK			0x1F
#define PLXNTB_VS0_UPSTREAM_NT0_PORT_SHIFT		8
#define PLXNTB_VS0_UPSTREAM_REG				PCIEA(0x360)
#define PLXNTB_VS0_UPSTREAM_NT0_ENABLE			BIT(13)
#define PLXNTB_VS0_UPSTREAM_NT1_ENABLE			BIT(21)
#define PLXNTB_VS0_UPSTREAM_DMA_MODE			BIT(24)
#define PLXNTB_VS0_UPSTREAM_NT0_A_LUT_ENABLE		BIT(30)
#define PLXNTB_VS0_UPSTREAM_NT1_A_LUT_ENABLE		BIT(31)

/* registers of Virtual Switch Debug */
#define PLXNTB_VS_DEBUG_REG				PCIEA(0xA30)
#define PLXNTB_VS_DEBUG_DL_DOWN_RESET_DISABLE_BIT	BIT(4)
#define PLXNTB_VS_DEBUG_NT0_VIRTUAL_ACCESS_ENABLE_BIT	BIT(24)
#define PLXNTB_VS_DEBUG_NT0_LINK_ACCESS_ENABLE_BIT	BIT(25)

/* registers of Gen 3 Framing Error Status */
#define PLXNTB_GEN_FRAMING_ERROR_STATUS_REG		PCIEA(0x724)

/* registers of Recovery Diagnostic */
#define PLXNTB_RECOVERY_DIAGNOSTIC_REG			PCIEA(0xBC4)
#define PLXNTB_RECOVERY_DIAGNOSTIC_PORT_SHIFT		24
#define PLXNTB_RECOVERY_DIAGNOSTIC_COUNTER_MASK		0x0000FFFF

/* registers of Address Translation */
#define PLXNTB_BAR2_ADDRESS_TRANSLATION_LOWER_REG	PCIEA(0xC3C)
#define PLXNTB_BAR3_ADDRESS_TRANSLATION_UPPER_REG	PCIEA(0xC40)
#define PLXNTB_BAR4_ADDRESS_TRANSLATION_LOWER_REG	PCIEA(0xC44)
#define PLXNTB_BAR5_ADDRESS_TRANSLATION_UPPER_REG	PCIEA(0xC48)

/* registers of Doorbell */
#define PLXNTB_VIRTUAL_DOORBELL_MASK			0x0000FFFF
#define PLXNTB_VIRTUAL_DOORBELL_IRQ_SET_REG		PCIEA(0xC4C)
#define PLXNTB_VIRTUAL_DOORBELL_IRQ_CLEAR_REG		PCIEA(0xC50)
#define PLXNTB_VIRTUAL_DOORBELL_IRQ_MASK_SET_REG	PCIEA(0xC54)
#define PLXNTB_VIRTUAL_DOORBELL_IRQ_MASK_CLEAR_REG	PCIEA(0xC58)

/* registers of Scratchpad */
#define PLXNTB_VIRTUAL_SCRATCHPAD_0_REG			PCIEA(0xC6C)
#define PLXNTB_VIRTUAL_SCRATCHPAD_1_REG			PCIEA(0xC70)
#define PLXNTB_VIRTUAL_SCRATCHPAD_2_REG			PCIEA(0xC74)
#define PLXNTB_VIRTUAL_SCRATCHPAD_3_REG			PCIEA(0xC78)
#define PLXNTB_VIRTUAL_SCRATCHPAD_4_REG			PCIEA(0xC7C)
#define PLXNTB_VIRTUAL_SCRATCHPAD_5_REG			PCIEA(0xC80)
#define PLXNTB_VIRTUAL_SCRATCHPAD_6_REG			PCIEA(0xC84)
#define PLXNTB_VIRTUAL_SCRATCHPAD_7_REG			PCIEA(0xC88)

/* registers of Requester ID */
#define PLXNTB_REQUESTER_ID_READ_BACK			PCIEA(0xC90)
#define PLXNTB_RID_VIRTUAL_ARRAY_REG			PCIEA(0xD94)
#define PLXNTB_RID_LINK_ARRAY_REG			PCIEA(0xDB4)
#define PLXNTB_RID_ENTRIES				32
#define PLXNTB_RID_ENTRY_PAIRS				(PLXNTB_RID_ENTRIES / 2)
#define PLXNTB_RID_BUS_SHIFT				8
#define PLXNTB_RID_SLOT_SHIFT				3
#define PLXNTB_RID_ENTRY_SHIFT				16
#define PLXNTB_RID_SLOT_MASK				0xF8
#define PLXNTB_RID_ENTRY_ENABLE				BIT(0)
#define PLXNTB_RID_ENTRY_ENABLE_UPPER			BIT(16)
#define PLXNTB_RID_ENTRY_MASK_UPPER			0x0000FFFF
#define PLXNTB_RID_ENTRY_MASK_LOWER			0xFFFF0000

/* registers of Bad packet Count */
#define PLXNTB_LINK_SIDE_BAD_TLP_COUNT_REG		PCIEA(0xFAC)
#define PLXNTB_LINK_SIDE_BAD_DLLP_COUNT_REG		PCIEA(0xFB0)

/* registers of Advanced Error Reporting */
#define PLXNTB_UNCORRECTABLE_ERROR_STATUS_REG		PCIEA(0xFB8)
#define PLXNTB_UNCORRECTABLE_ERROR_SEVERITY_REG		PCIEA(0xFC0)
#define PLXNTB_CORRECTABLE_ERROR_STATUS_REG		PCIEA(0xFC4)
#define PLXNTB_CORRECTABLE_ERROR_MASK_REG		PCIEA(0xFC8)

#define PLXNTB_LINK_ERROR_STATUS_VIRTUAL_REG		PCIEA(0xFE0)
#define PLXNTB_LINK_ERROR_MASK_VIRTUAL_REG		PCIEA(0xFE4)
#define PLXNTB_LINK_ERROR_MASK_CORRECTABLE_BIT		BIT(0)
#define PLXNTB_LINK_ERROR_MASK_UNCORRECTABLE_BIT	BIT(1)
#define PLXNTB_LINK_ERROR_MASK_DL_ACTIVE_CHANGE_BIT	BIT(2)
#define PLXNTB_LINK_ERROR_MASK_MESSAGE_DROP_BIT		BIT(3)

#define PLXNTB_CES_RECEIVER_ERROR_BIT			0
#define PLXNTB_CES_BAD_TLP_ERROR_BIT			6
#define PLXNTB_CES_BAD_DLLP_ERROR_BIT			7
#define PLXNTB_CES_REPLAY_NUM_ROLLOVER_ERROR_BIT	8
#define PLXNTB_CES_REPLAY_TIMER_TIMEOUT_ERROR_BIT	12
#define PLXNTB_CES_ADVISORY_NON_FATAL_ERROR_BIT		13
#define PLXNTB_CES_CORRECTED_INTERNAL_ERROR_BIT		14
#define PLXNTB_CES_HEADER_LOG_OVERFLOW_BIT		15

#define PLXNTB_CORRECTABLE_ERROR_ALL \
	(BIT(PLXNTB_CES_RECEIVER_ERROR_BIT) | \
	 BIT(PLXNTB_CES_BAD_TLP_ERROR_BIT) | \
	 BIT(PLXNTB_CES_BAD_DLLP_ERROR_BIT) | \
	 BIT(PLXNTB_CES_REPLAY_NUM_ROLLOVER_ERROR_BIT) | \
	 BIT(PLXNTB_CES_REPLAY_TIMER_TIMEOUT_ERROR_BIT) | \
	 BIT(PLXNTB_CES_ADVISORY_NON_FATAL_ERROR_BIT) | \
	 BIT(PLXNTB_CES_CORRECTED_INTERNAL_ERROR_BIT) | \
	 BIT(PLXNTB_CES_HEADER_LOG_OVERFLOW_BIT))

#define PLXNTB_UES_DATA_LINK_PROTOCOL_ERROR_BIT		4
#define PLXNTB_UES_SURPRISE_DOWN_ERROR_BIT		5
#define PLXNTB_UES_POISONED_TLP				12
#define PLXNTB_UES_FLOW_CONTROL_PROTOCOL_ERROR_BIT	13
#define PLXNTB_UES_COMPLETION_TIMEOUT_BIT		14
#define PLXNTB_UES_COMPLETER_ABORT_BIT			15
#define PLXNTB_UES_UNEXPECTED_COMPLETION_BIT		16
#define PLXNTB_UES_RECEIVER_OVERFLOW_BIT		17
#define PLXNTB_UES_MALFORMED_TLP_BIT			18
#define PLXNTB_UES_ECRC_ERROR_BIT			19
#define PLXNTB_UES_UNSUPPORTED_REQUEST_ERROR_BIT	20
#define PLXNTB_UES_UNCORRECTABLE_INTERNAL_ERROR_BIT	22
#define PLXNTB_UES_MC_BLOCKED_BIT			23
#define PLXNTB_UES_ATOMIC_OPERATION_EGRESS_BLOCKED_BIT	24

#define PLXNTB_UNCORRECTABLE_ERROR_ALL \
	(BIT(PLXNTB_UES_DATA_LINK_PROTOCOL_ERROR_BIT) | \
	 BIT(PLXNTB_UES_SURPRISE_DOWN_ERROR_BIT) | \
	 BIT(PLXNTB_UES_POISONED_TLP) | \
	 BIT(PLXNTB_UES_FLOW_CONTROL_PROTOCOL_ERROR_BIT) | \
	 BIT(PLXNTB_UES_COMPLETION_TIMEOUT_BIT) | \
	 BIT(PLXNTB_UES_COMPLETER_ABORT_BIT) | \
	 BIT(PLXNTB_UES_UNEXPECTED_COMPLETION_BIT) | \
	 BIT(PLXNTB_UES_RECEIVER_OVERFLOW_BIT) | \
	 BIT(PLXNTB_UES_MALFORMED_TLP_BIT) | \
	 BIT(PLXNTB_UES_ECRC_ERROR_BIT) | \
	 BIT(PLXNTB_UES_UNSUPPORTED_REQUEST_ERROR_BIT) | \
	 BIT(PLXNTB_UES_UNCORRECTABLE_INTERNAL_ERROR_BIT) | \
	 BIT(PLXNTB_UES_MC_BLOCKED_BIT) | \
	 BIT(PLXNTB_UES_ATOMIC_OPERATION_EGRESS_BLOCKED_BIT))

/* registers of Ingress Control */
#define PLXNTB_INGRESS_CONTROL_REG			PCIEA(0xF60)
#define PLXNTB_INGRESS_CONTROL_DROP_POISONED_TLPS	BIT(9)

/* registers of Power Management Hot Plug User Configuration */
#define PLXNTB_PM_HOT_PLUG_REG				PCIEA(0xF70)
#define PLXNTB_PM_HOT_PLUG_CONTROL_WRITE_ENABEL		BIT(11)

/* registers of Device Port Map */
#define PLXNTB_PORT_BASE_OFFSET				0x1000
#define PLXNTB_PORT0_BASE_REG				PCIEA(0x00000)
#define PLXNTB_PORT1_BASE_REG				PCIEA(0x01000)
#define PLXNTB_PORT8_BASE_REG				PCIEA(0x08000)
#define PLXNTB_PORT9_BASE_REG				PCIEA(0x09000)
#define PLXNTB_PORT16_BASE_REG				PCIEA(0x10000)
#define PLXNTB_PORT21_BASE_REG				PCIEA(0x15000)
#define PLXNTB_NT0_VIRTUAL_BASE_REG			PCIEA(0x3E000)
#define PLXNTB_NT0_LINK_BASE_REG			PCIEA(0x3F000)

/* Intel ioat device id */
#define PCI_DEVICE_ID_INTEL_IOAT_BDX0			0x6f20
#define PCI_DEVICE_ID_INTEL_IOAT_BDX1			0x6f21
#define PCI_DEVICE_ID_INTEL_IOAT_BDX2			0x6f22
#define PCI_DEVICE_ID_INTEL_IOAT_BDX3			0x6f23
#define PCI_DEVICE_ID_INTEL_IOAT_BDX4			0x6f24
#define PCI_DEVICE_ID_INTEL_IOAT_BDX5			0x6f25
#define PCI_DEVICE_ID_INTEL_IOAT_BDX6			0x6f26
#define PCI_DEVICE_ID_INTEL_IOAT_BDX7			0x6f27
#define PCI_DEVICE_ID_INTEL_IOAT_BDX8			0x6f2e
#define PCI_DEVICE_ID_INTEL_IOAT_BDX9			0x6f2f
#define PCI_DEVICE_ID_INTEL_IOAT_IVB0			0x0e20
#define PCI_DEVICE_ID_INTEL_IOAT_IVB1			0x0e21
#define PCI_DEVICE_ID_INTEL_IOAT_IVB2			0x0e22
#define PCI_DEVICE_ID_INTEL_IOAT_IVB3			0x0e23
#define PCI_DEVICE_ID_INTEL_IOAT_IVB4			0x0e24
#define PCI_DEVICE_ID_INTEL_IOAT_IVB5			0x0e25
#define PCI_DEVICE_ID_INTEL_IOAT_IVB6			0x0e26
#define PCI_DEVICE_ID_INTEL_IOAT_IVB7			0x0e27
#define PCI_DEVICE_ID_INTEL_IOAT_IVB8			0x0e2e
#define PCI_DEVICE_ID_INTEL_IOAT_IVB9			0x0e2f

enum ntb_port_state {
	NTB_PORT_DISABLED = 0,
	NTB_PORT_ENABLED
};

enum switch_port_num {
	PLXNTB_PORT0 = 0,
	PLXNTB_PORT1 = 1,
	PLXNTB_PORT8 = 8,
	PLXNTB_PORT9 = 9,
	PLXNTB_PORT16 = 16,
	PLXNTB_PORT21 = 21
};

struct switch_config {
	int local_bar_num;
	int remote_bar_num;
	int mw_bar[PLXNTB_MW_COUNT];
	int mw_addr_size[PLXNTB_MW_COUNT];
};

struct ntb_bar_resources {
	u32	type;
	u32	base;
	u32	size;
	u64	base64;
	u64	size64;
};

struct ntb_mmio {
	u32		__iomem *base_pcireg;
	u32		__iomem *virtual_pcireg;
	u32		__iomem *link_pcireg;
	u32		__iomem *virtual_rid_lookup_table;
	u32		__iomem *link_rid_lookup_table;
};

struct plx_ntb_dev {
	struct ntb_dev			ntb;

	struct ntb_mmio			local_mmio;
	struct ntb_mmio			remote_mmio;

	struct ntb_bar_resources	bar0_res;
	struct ntb_bar_resources	bar2_res;
	struct ntb_bar_resources	bar3_res;
	struct ntb_bar_resources	bar4_res;

	const struct switch_config	*switch_cfg;

	enum switch_port_num		ups_port;
	enum switch_port_num		ntb_port;
	enum ntb_port_state		port_state;

	u16				link_speed_width;

	u32				link_bar0;
	u32				link_bar2;
	u32				link_bar4;
	u32				link_bar5;

	/* synchronize multiple access of db_mask and hw reg */
	spinlock_t			db_mask_lock;

	unsigned long			unsafe_flags;
	unsigned long			unsafe_flags_ignore;

	unsigned char			mw_count;
	unsigned char			spad_count;
	unsigned char			db_count;
	unsigned char			db_vec_count;
	unsigned char			db_vec_shift;

	u64				db_valid_mask;
	u64				db_link_mask;
	u64				db_mask;

	struct dentry			*debugfs_dir;
	struct dentry			*debugfs_info;
	struct dentry			*debugfs_debug;
};

#define ntb_ndev(__ntb) container_of(__ntb, struct plx_ntb_dev, ntb)

#endif
